#
# Basic yaml code to get the ESP32-2432S028R display to work in ESPHome.
#
# This yaml displays a graph of a Home Assistant temperature sensor.
#
# Written by Jonny Bergdahl
# - [GitHub](https://github.com/jonnybergdahl)
# - [Twitter](https://twitter.com/jonnybergdahl)
# - [YouTube](https://www.youtube.com/jonnybergdahl)
#
# ============================================================ 
# NOTE:
# In order for this to work you need to add the following settings in your secrets.yaml file:
# - api_key
# - ota_password
# - wifi_ssid
# - wifi_password
# - ap_password
#
# Create a folder named fonts in your ESPHome folder, and copy the file fonts/Arimo-Regular.ttf there.
#
# ============================================================ 
# Example file setup
# Change the naming below, they will be the names used in Home Assistant
#
substitutions:
  device_name: yellowtft1
  friendly_name: Yellow TFT 1

# ============================================================ 
# Standard ESPHome setup
#
# ESPHome naming
esphome:
  name: $device_name
  friendly_name: $friendly_name
 
# The ESP32-2432S028R uses a standard ESP32-WROVER, so we use the esp32dev defintion
esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

# Set OTA password
ota:
  password: !secret ota_password

# Setup WiFi credentials
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: $device_name Fallback Hotspot
    password: !secret ap_password

captive_portal:

# ============================================================ 
# ESPHome Display related setup
#
# Create a font to use, add and remove glyphs as needed. 
font:
  - file: 'fonts/Arimo-Regular.ttf'
    id: arimo48
    size: 48
    glyphs: " .,°0123456789C"
  - file: 'fonts/Arimo-Regular.ttf'
    id: arimo14
    size: 14
    glyphs: "0123456789"

# Create a Home Assistant blue color
color:
  - id: white
    hex: ffffff
  - id: ha_blue
    hex: 51c0f2

# Define the graph
# You can change the duration as needed, but you will need to change x_grid accordingly.
graph:
  - id: officegraph
    sensor: temperature
    duration: 1h
    width: 300
    height: 180
    x_grid: 10min
    y_grid: 5.0
    max_value: 35.0
    min_value: 15.0
    color: ha_blue

# ============================================================ 
# Home Assistant related setup
#
light:
  - platform: monochromatic
    output: backlight_pwm
    name: Display Backlight
    id: backlight
    restore_mode: ALWAYS_ON

# Setup the sensor, we will get this data from Home Assistant
# Change entity_id to the name of your sensor inside of Home Assistant
sensor:
  - platform: homeassistant
    id: temperature
    entity_id: sensor.bthome_office_thermometer_temperature
    internal: true

# ============================================================ 
# Hardware related setup
#
# Setup SPI for the display. The ESP32-2432S028R uses separate SPI buses for display and touch
spi:
  - id: tft
    clk_pin: GPIO14
    mosi_pin: GPIO13
    miso_pin: GPIO12
  - id: touch
    clk_pin: GPIO25
    mosi_pin: GPIO32
    miso_pin: GPIO39

# Setup a pin to control the backlight
output:
  - platform: ledc
    pin: GPIO21
    id: backlight_pwm

# Setup the ili9xxx platform
#
# Display is used as 240x320 by default so we rotate it to 90°
#
# We print the graph texts manaully as the graph component still don't support that, then
# we output the current value on top of the display, followed by the graph below it.
#
display:
  - platform: ili9xxx
    model: ili9341
    spi_id: tft
    cs_pin: GPIO15
    dc_pin: GPIO2
    rotation: 90
    lambda: |-
      it.fill(id(Color::BLACK));
      it.print(0, 60, id(arimo14), TextAlign::TOP_LEFT, "35");
      it.print(0, 105, id(arimo14), TextAlign::CENTER_LEFT, "30");
      it.print(0, 150, id(arimo14), TextAlign::CENTER_LEFT, "25");
      it.print(0, 195, id(arimo14), TextAlign::CENTER_LEFT, "20");
      it.print(0, 240, id(arimo14), TextAlign::BOTTOM_LEFT, "15");
      if (id(temperature).has_state()) {
        it.printf(160, 0, id(arimo48), TextAlign::TOP_CENTER, "%.1f °C", id(temperature).state);
      }
      it.graph(20, 60, id(officegraph));